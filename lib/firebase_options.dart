// File generated by FlutterFire CLI.
// ignore_for_file: lines_longer_than_80_chars, avoid_classes_with_only_static_members
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;
import 'package:flutter_dotenv/flutter_dotenv.dart';
import 'dart:js' as js;

/// Default [FirebaseOptions] for use with your Firebase apps.
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      final env = js.context['env'];
      if (env == null) {
        throw Exception(
            'Environment variables not found in JavaScript context');
      }

      final apiKey = env['FIREBASE_API_KEY'];
      if (apiKey == null || apiKey == '') {
        throw Exception(
            'FIREBASE_API_KEY is not set in JavaScript environment');
      }

      final authDomain = env['FIREBASE_AUTH_DOMAIN'];
      if (authDomain == null || authDomain == '') {
        throw Exception(
            'FIREBASE_AUTH_DOMAIN is not set in JavaScript environment');
      }

      final projectId = env['FIREBASE_PROJECT_ID'];
      if (projectId == null || projectId == '') {
        throw Exception(
            'FIREBASE_PROJECT_ID is not set in JavaScript environment');
      }

      final storageBucket = env['FIREBASE_STORAGE_BUCKET'];
      if (storageBucket == null || storageBucket == '') {
        throw Exception(
            'FIREBASE_STORAGE_BUCKET is not set in JavaScript environment');
      }

      final messagingSenderId = env['FIREBASE_MESSAGING_SENDER_ID'];
      if (messagingSenderId == null || messagingSenderId == '') {
        throw Exception(
            'FIREBASE_MESSAGING_SENDER_ID is not set in JavaScript environment');
      }

      final appId = env['FIREBASE_APP_ID'];
      if (appId == null || appId == '') {
        throw Exception('FIREBASE_APP_ID is not set in JavaScript environment');
      }

      final measurementId = env['FIREBASE_MEASUREMENT_ID'];
      if (measurementId == null || measurementId == '') {
        throw Exception(
            'FIREBASE_MEASUREMENT_ID is not set in JavaScript environment');
      }

      return FirebaseOptions(
        apiKey: apiKey,
        authDomain: authDomain,
        projectId: projectId,
        storageBucket: storageBucket,
        messagingSenderId: messagingSenderId,
        appId: appId,
        measurementId: measurementId,
      );
    } else {
      // For non-web platforms, use dotenv
      final apiKey = dotenv.env['FIREBASE_API_KEY'];
      if (apiKey == null || apiKey.isEmpty) {
        throw Exception('FIREBASE_API_KEY is not set in .env file');
      }

      final authDomain = dotenv.env['FIREBASE_AUTH_DOMAIN'];
      if (authDomain == null || authDomain.isEmpty) {
        throw Exception('FIREBASE_AUTH_DOMAIN is not set in .env file');
      }

      final projectId = dotenv.env['FIREBASE_PROJECT_ID'];
      if (projectId == null || projectId.isEmpty) {
        throw Exception('FIREBASE_PROJECT_ID is not set in .env file');
      }

      final storageBucket = dotenv.env['FIREBASE_STORAGE_BUCKET'];
      if (storageBucket == null || storageBucket.isEmpty) {
        throw Exception('FIREBASE_STORAGE_BUCKET is not set in .env file');
      }

      final messagingSenderId = dotenv.env['FIREBASE_MESSAGING_SENDER_ID'];
      if (messagingSenderId == null || messagingSenderId.isEmpty) {
        throw Exception('FIREBASE_MESSAGING_SENDER_ID is not set in .env file');
      }

      final appId = dotenv.env['FIREBASE_APP_ID'];
      if (appId == null || appId.isEmpty) {
        throw Exception('FIREBASE_APP_ID is not set in .env file');
      }

      final measurementId = dotenv.env['FIREBASE_MEASUREMENT_ID'];
      if (measurementId == null || measurementId.isEmpty) {
        throw Exception('FIREBASE_MEASUREMENT_ID is not set in .env file');
      }

      return FirebaseOptions(
        apiKey: apiKey,
        authDomain: authDomain,
        projectId: projectId,
        storageBucket: storageBucket,
        messagingSenderId: messagingSenderId,
        appId: appId,
        measurementId: measurementId,
      );
    }
  }
}
